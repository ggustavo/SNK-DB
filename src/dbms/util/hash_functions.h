/*
 * Useful hash functions
 */

#ifndef HASH_FUNCTIONS
#define HASH_FUNCTIONS

// ------------------------------------- lose lose --------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_lose_lose(const unsigned char * c, int len) {
    unsigned int hash = 0;
    while (len--){
        hash += (*c++);
    }
    return hash;
}

// ---------------------------------------- djb2 ----------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_djb2(const unsigned char * c, int len) { 
    unsigned int hash = 5381;
    while (len--){
        hash = ((hash << 5) + hash) + (*c++);
    }
    return hash;
}

// ---------------------------------------- sdbm ----------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_sdbm(const unsigned char * c, int len) {
    unsigned int hash = 0;
    while (len--){
        hash = (*c++) + (hash << 6) + (hash << 16) - hash;
    }
    return hash;
}

// -------------------------------------- jenkins ---------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_jenkins(const unsigned char * c, int len) {
    unsigned int hash = 0;
    while (len--){
        hash += (*c++);
    	hash += (hash << 10);
    	hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    hash += (hash << 15);
    return hash;
}

// -------------------------------------- Additive --------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_additive(const unsigned char * c, int len, int prime) {
    unsigned int hash = 0;
    int index = hash ^ (*c++);
    while (len--){
        hash += (*c++);
    }
    return hash % prime; 
}

// -------------------------------------- Rotating --------------------------------------------
// --------------------------------------------------------------------------------------------
unsigned int hash_rotating(const unsigned char * c, int len, int prime) {
    unsigned int hash = 0;
    int index = hash ^ (*c++);
    while (len--){
        hash = (hash<<4)^(hash>>28)^(*c++);
    }
    return hash % prime; 
}

// -------------------------------------- pearson ---------------------------------------------
// --------------------------------------------------------------------------------------------
 static const unsigned char T[256] = {  // 0-255 random numbers
        35,72,247,140,56,241,84,131,39,76,6,42,192,44,206,112,91,249,15,194,53,102,7,
        23,145,78,50,87,209,232,113,28,128,193,184,237,68,210,217,11,146,189,85,201,
        59,122,187,176,238,55,132,225,177,10,203,110,75,204,34,27,170,99,222,235,74,
        154,159,182,196,17,148,96,255,229,60,67,41,144,224,168,208,127,248,179,69,111,
        254,36,240,178,181,121,134,40,63,164,22,137,166,30,98,14,141,92,88,118,79,186,
        117,24,4,143,169,149,221,139,242,125,214,54,8,73,58,29,165,120,66,3,150,158,243,
        124,77,250,236,104,5,174,90,1,33,162,105,13,245,48,0,107,2,252,142,195,18,173,
        199,119,26,52,61,183,21,81,251,197,223,135,103,220,46,188,49,97,114,38,234,133,
        83,82,239,123,172,19,65,175,171,215,108,167,116,129,16,80,180,95,89,253,101,191,
        20,231,71,228,47,147,205,246,31,115,190,160,93,86,227,62,100,153,25,161,152,219,
        138,94,198,151,233,157,230,211,156,155,57,70,109,226,207,163,185,202,45,37,136,244,
        12,106,216,212,64,43,51,218,200,213,32,126,130,9
      };

unsigned int hash_pearson(const unsigned char * c, int len) {
    unsigned int hash = 0;
    int index = hash ^ (*c++);
    while (len--){
        hash = T[hash ^ (*c++)];
    }
    return hash;
}

#endif